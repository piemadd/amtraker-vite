map.current.on("click", (e) => {
            let f = map.current.queryRenderedFeatures(e.point, {
              layers: ["trains", "stations"],
            });

            if (f.length === 0) return;

            const fSorted = f.sort((a, b) => {
              if (a.layer.id === "trains") return 1;
              if (b.layer.id === "trains") return -1;
              return 0;
            });

            const feature = fSorted[0];

            if (feature.layer.id === "trains") {
              const train = feature.properties;
              const coordinates = feature.geometry.coordinates.slice();

              let predictionsHTML = "";

              JSON.parse(train.predictions)
                .sort((a, b) => a.actualETA - b.actualETA)
                .slice(0, 5)
                .forEach((prediction) => {
                  console.log("prediction", prediction);
                  predictionsHTML += `<p class='mapTrainBar' style='color: #${
                    train.lineTextColor
                  }; background-color: #${train.lineColor};'><strong>${
                    prediction.stationName
                  }</strong><strong>${
                    prediction.noETA
                      ? "No ETA"
                      : hoursMinutesUntilArrival(new Date(prediction.actualETA))
                  }</strong></p>`;
                });

              const extra = train.extra ? JSON.parse(train.extra) : null;

              const trainPopup = new maplibregl.Popup({
                offset: 12,
                closeButton: true,
                anchor: "bottom",
              })
                .setLngLat(coordinates)
                .setHTML(
                  `<div class='mapBar'><h3>${
                    agencies[agency].useCodeForShortName
                      ? train.lineCode
                      : train.line
                  }${agencies[agency].addLine ? " Line " : " "}#${
                    train.id
                  } to ${train.dest}</h3>${
                    extra && (extra.cap || extra.info)
                      ? `<p style='margin-top: -2px;padding-bottom: 4px;'>${
                          extra.info ?? ""
                        }${extra.cap && extra.info ? " | " : ""}${
                          extra.cap
                            ? `${Math.ceil(
                                (extra.load / extra.cap) * 100
                              )}% Full`
                            : ""
                        }</p>`
                      : ""
                  }${predictionsHTML}<p class='mapTrainBar' style='color: #${
                    train.lineTextColor
                  }; background-color: #${
                    train.lineColor
                  };'><strong><a style='color: #${
                    train.lineTextColor
                  }; background-color: #${
                    train.lineColor
                  };' href='/${agency}/track/${train.id}?prev=map'>View Full ${
                    agencies[agency].type
                  }</a></strong></p></div>`
                )
                .addTo(map.current);
            } else if (feature.layer.id === "stations") {
              const station = JSON.parse(feature.properties.stationData);
              const coordinates = feature.geometry.coordinates.slice();

              let finalHTML = `<div class='mapBar'><h3>${station.stationName}</h3>`;

              let noTrainsAtAll = true;

              Object.keys(station.destinations).forEach((destKey) => {
                const dest = station.destinations[destKey];
                let destHasLineTrains = false;

                dest.trains.forEach((train) => {
                  if (
                    train.lineCode === singleRouteID ||
                    singleRouteID === "all"
                  ) {
                    destHasLineTrains = true;
                  }
                });

                if (dest.trains.length === 0 || !destHasLineTrains) {
                  //finalHTML += `<p class='mapTrainBar'>No trains tracking</p>`;
                } else {
                  noTrainsAtAll = false;
                  finalHTML += `<p class='mapStationBar'>To <strong>${destKey}</strong></p>`;
                  dest.trains
                    .filter(
                      (train) =>
                        (train.lineCode === singleRouteID ||
                          singleRouteID === "all") &&
                        !train.noETA
                    )
                    .sort((a, b) => a.actualETA - b.actualETA)
                    .slice(0, 3)
                    .forEach((train) => {
                      finalHTML += `<p class='mapTrainBar' style='color: #${
                        train.lineTextColor
                      }; background-color: #${
                        train.lineColor
                      };'><span><strong>${
                        agencies[agency].useCodeForShortName
                          ? train.lineCode
                          : train.line
                      }${agencies[agency].addLine ? " Line " : " "}</strong>${
                        agencies[agency].tripIDPrefix
                      }${
                        train.runNumber
                      } to <strong>${destKey}</strong></span><strong>${
                        train.noETA
                          ? "No ETA"
                          : hoursMinutesUntilArrival(new Date(train.actualETA))
                      }</strong></p>`;
                    });
                }
              });

              if (noTrainsAtAll) {
                finalHTML += `<p class='mapTrainBar'>No ${agencies[agency].typeCodePlural} tracking</p>`;
              }

              finalHTML += `<p class='mapStationBar' style='color: ${agencies[agency].textColor}; background-color: ${agencies[agency].color};'><strong><a style='color: ${agencies[agency].textColor}; background-color: ${agencies[agency].color};' href='/${agency}/stops/${station.stationID}?prev=map'>View Full Station</a></strong></p></div>`;

              const stationPopup = new maplibregl.Popup({
                offset: 12,
                closeButton: true,
                anchor: "bottom",
              })
                .setLngLat(coordinates)
                .setHTML(finalHTML)
                .addTo(map.current);
            }
          });